# Use Visual Studio generated gitignore for C#

## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/main/VisualStudio.gitignore

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Mono auto generated files
mono_crash.*

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Visual Studio 2017/2019 cache/options directory
.vs
# EditorConfig config file
.editorconfig

# Visual Studio Code files
.vscode/

# Rider files
.idea/

# MSTest test results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.nunit
nunit-agent-*.log
nunit-console-*.log

# VSTest
*.vsix
*.vspackage
*.vstest
*.vssettings
*.testsettings

# ReSharper
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# Coverlet
coverage.cobertura.xml
coverage.json

# NuGet
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# The obj/project.assets.json file is managed by the build process.
**/obj/project.assets.json
# The obj/project.nuget.cache file is managed by the build process.
**/obj/project.nuget.cache
# The .nuget/packages folder is managed by the build process.
**/.nuget/packages/*

# Windows thumbnail cache files
Thumbs.db
ehthumbs.db

# Dotnet files
project.lock.json
project.fragment.lock.json

# Secrets
secrets.json
appsettings.Development.json

# Local NuGet packages
*.nupkg

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

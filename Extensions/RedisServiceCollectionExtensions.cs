using EIU.Infrastructure.Redis.Core;
using EIU.Infrastructure.Redis.Interceptors;
using EIU.Infrastructure.Redis.Manager;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using StackExchange.Redis;

namespace EIU.Infrastructure.Redis.Extensions
{
    /// <summary>
    /// Ti·ªán √≠ch m·ªü r·ªông gi√∫p c·∫•u h√¨nh v√† ƒëƒÉng k√Ω Redis Cache v√†o Dependency Injection container.
    /// H·ªó tr·ª£ ƒë·ªçc c·∫•u h√¨nh t·ª´ appsettings.json (section m·∫∑c ƒë·ªãnh: "RedisCache").
    /// </summary>
    public static class RedisServiceCollectionExtensions
    {
        /// <summary>
        /// üß© ƒêƒÉng k√Ω to√†n b·ªô Redis caching components:
        /// - RedisCacheOptions (t·ª´ appsettings)
        /// - RedisCacheService, RedisCacheManager, RedisCacheInterceptor
        /// </summary>
        /// <param name="services">IServiceCollection trong Startup ho·∫∑c Program.cs</param>
        /// <param name="configuration">C·∫•u h√¨nh appsettings.json ho·∫∑c m√¥i tr∆∞·ªùng</param>
        /// <returns>IServiceCollection ƒë·ªÉ chain ti·∫øp c·∫•u h√¨nh</returns>
        public static IServiceCollection AddRedisCaching(
                    this IServiceCollection services,
                    IConfiguration configuration)
        {
            // 1Ô∏è‚É£ ƒê·ªçc c·∫•u h√¨nh RedisCacheOptions (to√†n b·ªô appsettings)
            var redisConfig = new RedisCacheOptions();
            configuration.Bind(redisConfig); // Kh√¥ng c·∫ßn section, bind to√†n b·ªô

            // 2Ô∏è‚É£ N·∫øu Redis b·ªã t·∫Øt th√¨ b·ªè qua
            if (!redisConfig.Enabled)
                return services;

            // 3Ô∏è‚É£ ƒêƒÉng k√Ω IOptions<RedisCacheOptions> th·ªß c√¥ng
            services.AddSingleton<IOptions<RedisCacheOptions>>(
                Options.Create(redisConfig)
            );

            // 4Ô∏è‚É£ ƒêƒÉng k√Ω RedisCacheOptions tr·ª±c ti·∫øp (n·∫øu mu·ªën inject kh√¥ng qua IOptions)
            services.AddSingleton(redisConfig);

            // 5Ô∏è‚É£ ƒêƒÉng k√Ω ConnectionMultiplexer (Redis client)
            services.AddSingleton<IConnectionMultiplexer>(sp =>
            {
                return ConnectionMultiplexer.Connect(redisConfig.ConnectionString);
            });

            // 6Ô∏è‚É£ ƒêƒÉng k√Ω Redis services
            services.AddSingleton<IRedisCacheService, RedisCacheService>();
            services.AddSingleton<IRedisCacheManager, RedisCacheManager>();
            services.AddSingleton<RedisCacheInterceptor>();

            return services;
        }
    }
}
